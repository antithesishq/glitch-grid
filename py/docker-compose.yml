version: '3.8'

services:
  # Define three vaults which can provide some degree of replication/redundancy.
  vault1:
    command: "--port 8001"
    image: demo-py-vault:${IMAGE_TAG}
    container_name: vault1
    ports:
      - "8001:8001"
    networks:
      py-demo:
        ipv4_address: 10.0.0.121

  vault2:
    command: "--port 8002"
    image: demo-py-vault:${IMAGE_TAG}
    container_name: vault2
    ports:
      - "8002:8002"
    networks:
      py-demo:
        ipv4_address: 10.0.0.122

  vault3:
    command: "--port 8003"
    image: demo-py-vault:${IMAGE_TAG}
    container_name: vault3
    ports:
      - "8003:8003"
    networks:
      py-demo:
        ipv4_address: 10.0.0.123

  control:
    # The address of the various vaults we've defined.
    # Define some extra logging for the controller.
    command: "--vaults 10.0.0.121:8001,10.0.0.122:8002,10.0.0.123:8003 --loglevel=info"
    image: demo-py-control:${IMAGE_TAG}
    container_name: control
    ports:
      - "8000:8000"
    networks:
      py-demo:
        ipv4_address: 10.0.0.120

  workload:
    # The address of the controller
    command: "10.0.0.120:8000"
    image: demo-workload:${IMAGE_TAG}
    container_name: workload
    environment:
      - START_DELAY=15
      - FINAL_DELAY=5
      - NUM_STEPS=100
      - MAX_STEP_SIZE=3
      - CHECK_WHEN_MULTIPLE_OF=10
    networks:
      py-demo:
        ipv4_address: 10.0.0.110

networks:
  py-demo:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/24
